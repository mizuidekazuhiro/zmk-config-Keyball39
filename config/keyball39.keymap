#define DEFAULT 0
#define ADJUSTMENT 1
#define NUM     2
#define SYM     3
#define MOUSE   4
#define SCROLL  5
#define FUN     6
#define SNIPE   7

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shisokuenzan: shisokuenzan {
            compatible = "zmk,behavior-tap-dance";
            label = "SHISOKUENZAN";
            #binding-cells = <0>;
            bindings =
                <&kp KP_PLUS>,
                <&kp KP_MINUS>,
                <&kp KP_ASTERISK>,
                <&kp KP_DIVIDE>,
                <&kp KP_EQUAL>;

            tapping-term-ms = <270>;
        };

        paste_paste: paste_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTE_PASTE";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>, <&kp LS(LC(V))>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };

        shotai: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp F &kp F>;
            label = "NEW_MACRO";
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp LC(ESCAPE)>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <18 19>;
        };

        click {
            bindings = <&mkp LCLK>;
            key-positions = <16 17>;
        };

        henkan {
            bindings = <&kp JP_KANA>;
            key-positions = <5 6>;
        };

        muhenkan {
            bindings = <&kp JP_EISUqqqqqqqqqqqqqqqqqqqqqqqqq>;
            key-positions = <3 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q  &kp W             &kp E     &kp R           &kp T                                         &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A  &kp S             &kp D     &kp F           &kp G                                         &kp H        &kp J  &kp K      &kp L    &mo 4
&kp Z  &kp X             &kp C     &kp V           &kp B                                         &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&mo 1  &mt LEFT_GUI TAB  &kp LALT  &kp LEFT_SHIFT  &lt 2 BACKSPACE  &kp LEFT_CONTROL  &kp ENTER  &lt 3 SPACE                             &kp LS(LEFT_CONTROL)
            >;
        };

        adjustment {
            bindings = <
&none   &kp LA(F4)       &trans  &kp LS(LC(R))  &kp LA(GRAVE)                              &to 4         &trans       &kp LS(LC(I))  &trans         &none
&trans  &kp PRINTSCREEN  &trans  &trans         &kp LEFT_CONTROL                           &shotai       &kp LEFT     &kp UP         &kp RIGHT      &kp TAB
&trans  &trans           &trans  &kp LS(LC(V))  &kp LEFT_SHIFT                             &trans        &kp PAGE_UP  &kp DOWN       &kp PAGE_DOWN  &trans
&trans  &trans           &trans  &mo 6          &kp DELETE        &kp LEFT_GUI  &kp ENTER  &kp LEFT_ALT                                             &trans
            >;

            label = "adj";
        };

        number_layer {
            bindings = <
&kp KP_PLUS   &kp N7          &kp N8          &kp N9  &kp PERCENT                           &kp LC(C)       &paste_paste  &kp F2    &kp F4     &shisokuenzan
&kp KP_MINUS  &kp N4          &kp N5          &kp N6  &mt LS(N9) LS(N8)                     &kp SPACE       &kp LEFT      &kp UP    &kp RIGHT  &kp RCTRL
&kp N0        &kp N1          &kp N2          &kp N3  &trans                                &kp TAB         &kp PG_UP     &kp DOWN  &kp PG_DN  &trans
&mo 6         &kp LS(LC(LT))  &kp LS(LC(GT))  &none   &trans             &trans  &kp ENTER  &kp LEFT_SHIFT                                     &trans
            >;

            label = "NUM";
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT                             &kp CARET          &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS                 &kp MINUS
&mo 7            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp LEFT_SHIFT                          &kp JP_EQUAL       &kp EQUAL      &kp LEFT_BRACKET  &mt LS(RIGHT_BRACKET) RIGHT_BRACKET  &mt LS(BACKSLASH) BACKSLASH
&trans           &trans        &trans        &trans        &trans                                  &kp JP_UNDERSCORE  &kp JP_PIPE    &trans            &trans                               &mt SEMICOLON SQT
&trans           &trans        &trans        &trans        &trans          &kp LEFT_SHIFT  &trans  &trans                                                                                   &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&mo 5  &none           &kp LS(LEFT_CONTROL)  &kp LEFT_SHIFT  &kp LEFT_CONTROL                     &to 0          &none      &none           &none      &none
&none  &kp LEFT_ARROW  &kp UP_ARROW          &kp RIGHT       &none                                &kp PAGE_UP    &mkp LCLK  &msc SCRL_UP    &mkp RCLK  &none
&none  &none           &kp DOWN              &none           &none                                &kp PAGE_DOWN  &mkp MB4   &msc SCRL_DOWN  &mkp MB5   &mkp MCLK
&none  &trans          &trans                &kp LEFT_SHIFT  &kp BACKSPACE     &kp RCTRL  &trans  &mo 7                                                &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &kp LEFT_CONTROL                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                            &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                            &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                          &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&none   &kp F7  &kp F8  &kp F9  &kp LEFT_SHIFT                       &none   &kp F7  &kp F8  &kp F9  &kp F10
&none   &kp F4  &kp F5  &kp F6  &kp LEFT_CONTROL                     &none   &kp F4  &kp F5  &kp F6  &kp F11
&none   &none   &kp F2  &kp F3  &kp LALT                             &none   &none   &kp F2  &kp F3  &kp F12
&trans  &trans  &trans  &trans  &trans            &trans  &kp ENTER  &trans                          &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&bt BT_CLR_ALL  &trans  &trans  &trans  &bootloader                  &bootloader  &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans                       &trans       &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans                       &trans       &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans       &trans  &trans  &trans                               &trans
            >;
        };

        number_layer_ {
            label = "NUM_";
            bindings = <
&kp LEFT_ALT  &kp F2                 &none                     &kp F4         &kp PERCENT                            &kp RS(RIGHT_CONTROL)  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp KP_MINUS
&kp TAB       &kp LEFT_ARROW         &kp UP_ARROW              &kp RIGHT      &mt LS(N9) LS(N8)                      &kp RIGHT_CONTROL      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &mt TAB KP_PLUS
&kp SPACE     &kp PAGE_UP            &kp DOWN_ARROW            &kp PAGE_DOWN  &none                                  &kp RIGHT_SHIFT        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_ASTERISK
&trans        &kp LS(LC(LESS_THAN))  &kp LS(LC(GREATER_THAN))  &kp ESCAPE     &trans             &trans  &kp RETURN  &kp N0                                                           &kp KP_DIVIDE
            >;
        };
    };
};
